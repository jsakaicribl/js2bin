--- src/api/api.cc
+++ src/api/api.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.

+#include "base/time/time.h"
+
 #include "src/api/api.h"

 #include <algorithm>  // For min
@@ -299,8 +301,9 @@ void i::V8::FatalProcessOutOfMemory(i::Isolate* i_isolate, const char* location,
       char* first_newline = strchr(last_few_messages, '\n');
       if (first_newline == nullptr || first_newline[1] == '\0')
         first_newline = last_few_messages;
-      base::OS::PrintError("\n<--- Last few GCs --->\n%s\n", first_newline);
-      base::OS::PrintError("\n<--- JS stacktrace --->\n%s\n", js_stacktrace);
+        std::string timestamp = base::Time::Now().ToString();
+        base::OS::PrintError("\n[%s] <--- Last few GCs --->\n%s\n", timestamp.c_str(), first_newline);
+        base::OS::PrintError("\n[%s] <--- JS stacktrace --->\n%s\n", timestamp.c_str(), js_stacktrace);
     }
   }
   Utils::ReportOOMFailure(i_isolate, location, details);
